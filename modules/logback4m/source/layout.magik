_package logback4m

def_slotted_exemplar(
	:layout,
	{},
	{})
$

_pragma(classify_level=basic, topic={logger})
_method layout.new()
	## Function        : Constructor
	## Parameters      : 
	## Returns         : 
	_return _clone.init()
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_private _method layout.init()
	## Function        : 
	## Parameters      : 
	## Returns         : 
	_return _self
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_abstract _method layout.do_layout(p_log_event)
	## Function        : Layout the given log_event
	## Parameters      : p_log_event: log event to layout
	## Returns         : string
	
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_abstract _method layout.content_type
	## Function        : 
	## Parameters      : 
	## Returns         : 
	
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_abstract _method layout.file_footer
	## Function        : 
	## Parameters      : 
	## Returns         : 
	
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_abstract _method layout.file_header
	## Function        : 
	## Parameters      : 
	## Returns         : 
	
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_abstract _method layout.presentation_footer
	## Function        : 
	## Parameters      : 
	## Returns         : 
	
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_abstract _method layout.presentation_header
	## Function        : 
	## Parameters      : 
	## Returns         : 
	
_endmethod
$
