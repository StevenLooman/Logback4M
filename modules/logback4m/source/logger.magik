def_slotted_exemplar(
	:logger,
	{
		{:appenders, _unset},
		{:level, _unset, :readable},
		{:name, _unset, :writable}
	},
	{})
$

logger.define_shared_constant(
	:TRACE,
	10,
	:public)
$

logger.define_shared_constant(
	:DEBUG,
	20,
	:public)
$

logger.define_shared_constant(
	:INFO,
	30,
	:public)
$

logger.define_shared_constant(
	:WARN,
	40,
	:public)
$

logger.define_shared_constant(
	:ERROR,
	50,
	:public)
$

logger.define_shared_constant(
	:OFF,
	60,
	:public)
$

_pragma(classify_level=basic, topic={logger})
_method logger.new(p_name)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _clone.init(p_name)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_private _method logger.init(p_name)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	.appenders << rope.new()
	.name << p_name
	.level << _self.OFF
	_return _self
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_method logger.add_appender(p_appender)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	.appenders.add_last(p_appender)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.detach_appender(p_appender)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	.appenders.remove(p_appender)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.get_appender(p_name)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_for i_appender _over .appenders.fast_elements()
	_loop
		_local l_appender_name << i_appender.name
		_if l_appender_name = p_name
		_then
			_return i_appender
		_endif
	_endloop

	_return _unset
_endmethod
$



_pragma(classify_level=basic, topic={logger})
_method logger.level << p_level
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_if p_level < _self.TRACE _orif
	    p_level > _self.OFF
	_then
		condition.raise(:user_error, :string, "level must be between TRACE and OFF")
	_endif
	.level << p_level
_endmethod
$



_pragma(classify_level=basic, topic={logger})
_method logger.is_trace_enabled?
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _self.is_enabled_for?(_self.TRACE)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.is_debug_enabled?
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _self.is_enabled_for?(_self.DEBUG)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.is_info_enabled?
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _self.is_enabled_for?(_self.INFO)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.is_warn_enabled?
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _self.is_enabled_for?(_self.WARN)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.is_error_enabled?
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _self.is_enabled_for?(_self.ERROR)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.is_enabled_for?(p_level)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return .level <= p_level
_endmethod
$




_pragma(classify_level=basic, topic={logger})
_method logger.trace(_gather p_message)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_self.log(_self.TRACE, _scatter p_message)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.debug(_gather p_message)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_self.log(_self.DEBUG, _scatter p_message)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.info(_gather p_message)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_self.log(_self.INFO, _scatter p_message)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.warn(_gather p_message)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_self.log(_self.WARN, _scatter p_message)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger.error(_gather p_message)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_self.log(_self.ERROR, _scatter p_message)
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_private _method logger.create_log_event(p_level, _gather p_message)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_local l_log_event << log_event.new(
				      _self.name,
				      _thisthread,
				      date_time.now(),
				      p_level,
				      write_string(_scatter p_message)
					)
	_return l_log_event
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_method logger.log(p_level, _gather p_message)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_if p_level < .level
	_then
		_return
	_endif

	_local l_log_event << _self.create_log_event(p_level, _scatter p_message)
	_for i_appender _over .appenders.fast_elements()
	_loop
		i_appender.do_append(l_log_event)
	_endloop
_endmethod
$
