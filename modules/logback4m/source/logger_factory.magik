_package logback4m

def_slotted_exemplar(
	:logger_factory,
	{
		{ :root_appenders, set.new() },
		{ :root_level, logger.OFF },
		{ :loggers, equality_hash_table.new() }
	},
	{})
$

_pragma(classify_level=basic, topic={logger})
_private _method logger_factory.new()
	## Function        : Private constructor, singleton
	## Parameters      : 
	## Returns         : 
	_return _clone.init()
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_private _method logger_factory.init()
	## Function        : 
	## Parameters      : 
	## Returns         : 
	_return _self
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_private _method logger_factory.create_logger(p_name)
	## Function        : Create a logger, identified by p_name
	## Parameters      : p_name: name of the logger
	## Returns         : logger
	_local l_logger << logger.new(p_name)
	
	_for i_appender _over .root_appenders.fast_elements()
	_loop
		l_logger.add_appender(i_appender)
	_endloop
	l_logger.level << .root_level
	
	_return l_logger
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_factory.get_logger(p_name)
	## Function        : Get the logger for p_name
	## Parameters      : p_name: name of the logger
	## Returns         : logger
	_if .loggers[p_name] _is _unset
	_then
		.loggers[p_name] << _self.create_logger(p_name)
	_endif

	_return .loggers[p_name]
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_factory.get_logger_by_exemplar(p_exemplar)
	## Function        : Get the logger for the p_exemplar
	## Parameters      : p_exemplar: name of the exemplar is derived 
	## Returns         : logger
	_local l_exemplar_name << p_exemplar.class_name
	_return _self.get_logger(l_exemplar_name)
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_method logger_factory.add_root_appender(p_appender)
	## Function        : Add an appender to the root logger
	## Parameters      : p_appender: appender to attach
	## Returns         : 
	.root_appenders.add(p_appender)
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_method logger_factory.root_level << p_level
	## Function        : Set the level for the root logger
	## Parameters      : p_level: level of the appender
	## Returns         : 
	.root_level << p_level
_endmethod
$
