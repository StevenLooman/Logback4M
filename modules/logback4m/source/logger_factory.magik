def_slotted_exemplar(
	:logger_factory,
	{
		{ :root_appenders, set.new() },
		{ :root_level, logger.OFF },
		{ :loggers, equality_hash_table.new() }
	},
	{})
$

_pragma(classify_level=basic, topic={logger})
_private _method logger_factory.new()
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _clone.init()
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_private _method logger_factory.init()
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_return _self
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_factory.create_logger(p_name)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_local l_logger << logger.new(p_name)
	
	_for i_appender _over .root_appenders.fast_elements()
	_loop
		l_logger.add_appender(i_appender)
	_endloop
	l_logger.level << .root_level
	
	_return l_logger
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_factory.get_logger(p_name)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_if .loggers[p_name] _is _unset
	_then
		.loggers[p_name] << _self.create_logger(p_name)
	_endif

	_return .loggers[p_name]
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_factory.get_logger_by_exemplar(p_exemplar)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	_local l_exemplar_name << p_exemplar.class_name
	_return _self.get_logger(l_exemplar_name)
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_method logger_factory.add_root_appender(p_appender)
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	.root_appenders.add(p_appender)
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_method logger_factory.root_level << p_level
	#  Initial Author  : steven.looman, Date : 2011-12-02
	## Parameters      : -
	## Returns         : -
	## Pre             : -
	## Function        : -
	## Post            : -
	.root_level << p_level
_endmethod
$
