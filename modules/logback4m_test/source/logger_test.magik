_package logback4m

def_slotted_exemplar(
	:logger_test,
	{
		{:logger, _unset},
		{:mock_appender, _unset}
	},
	{
		@sw:test_case
	})
$

_pragma(classify_level=basic, topic={logger})
_method logger_test.set_up()
	## Function        : Set up
	## Parameters      : 
	## Returns         : 
	.mock_appender << mock_appender.new()
	.logger << logback4m:logger.new(:logger_test)
	.logger.add_appender(.mock_appender)
_endmethod
$


_pragma(classify_level=basic, topic={logger})
_method logger_test.test_log_level_trace()
	## Function        : Tests if all events >= TRACE are recorded
	## Parameters      : 
	## Returns         : 
	.logger.level << logback4m:logger.TRACE
	.logger.trace("test message")
	.logger.debug("test message")
	.logger.info("test message")
	.logger.warn("test message")
	.logger.error("test message")
	
	_self.assert_equals(.mock_appender.log_events.size, 5)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_test.test_log_level_debug()
	## Function        : Tests if all events >= DEBUG are recorded
	## Parameters      : 
	## Returns         : 
	.logger.level << logback4m:logger.DEBUG
	.logger.trace("test message")
	.logger.debug("test message")
	.logger.info("test message")
	.logger.warn("test message")
	.logger.error("test message")
	
	_self.assert_equals(.mock_appender.log_events.size, 4)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_test.test_log_level_info()
	## Function        : Tests if all events >= INFO are recorded
	## Parameters      : 
	## Returns         : 
	.logger.level << logback4m:logger.INFO
	.logger.trace("test message")
	.logger.debug("test message")
	.logger.info("test message")
	.logger.warn("test message")
	.logger.error("test message")
	
	_self.assert_equals(.mock_appender.log_events.size, 3)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_test.test_log_level_warn()
	## Function        : Tests if all events >= WARN are recorded
	## Parameters      : 
	## Returns         : 
.logger.level << logback4m:logger.WARN
	.logger.trace("test message")
	.logger.debug("test message")
	.logger.info("test message")
	.logger.warn("test message")
	.logger.error("test message")
	
	_self.assert_equals(.mock_appender.log_events.size, 2)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_test.test_log_level_error()
	## Function        : Tests if all events >= ERROR are recorded
	## Parameters      : 
	## Returns         : 
	.logger.level << logback4m:logger.ERROR
	.logger.trace("test message")
	.logger.debug("test message")
	.logger.info("test message")
	.logger.warn("test message")
	.logger.error("test message")
	
	_self.assert_equals(.mock_appender.log_events.size, 1)
_endmethod
$

_pragma(classify_level=basic, topic={logger})
_method logger_test.test_log_level_off()
	## Function        : Tests if all events >= OFF (thus none) are recorded
	## Parameters      : 
	## Returns         : 
	.logger.level << logback4m:logger.OFF
	.logger.trace("test message")
	.logger.debug("test message")
	.logger.info("test message")
	.logger.warn("test message")
	.logger.error("test message")
	
	_self.assert_equals(.mock_appender.log_events.size, 0)
_endmethod
$
